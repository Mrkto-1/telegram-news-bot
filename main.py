import os
import asyncio
import feedparser
import sqlite3
from aiogram import Bot, Dispatcher
from aiogram.types import InputMediaPhoto
from datetime import datetime
from utils.filters import is_relevant
from utils.translator import translate_text

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –î–∂–µ—Ä–µ–ª–∞ RSS
RSS_FEEDS = [
    "https://www.epravda.com.ua/rss/",
    "https://www.ukrinform.ua/rss/economics",
    "https://biz.liga.net/ekonomika/rss.xml",
    "https://mind.ua/rss/news",
    "https://forbes.ua/rss"
]

# –ß–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –±–æ—Ç–∞ (–∑ 6:00 –¥–æ 23:00)
ACTIVE_HOURS = (6, 23)

# –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
KEYWORDS = ["—Ñ—Ä—Å", "—Å—Ç–∞–≤–∫–∞", "—ñ–Ω—Ñ–ª—è—Ü—ñ—è", "–µ–∫–æ–Ω–æ–º—ñ–∫–∞", "–∫—Ä–∏–∑–∞", "—Ä–µ—Ü–µ—Å—ñ—è", "s&p", "s & p"]
KEYWORDS_CRYPTO = ["–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "–±—ñ—Ç–∫–æ—ó–Ω", "bitcoin", "ethereum", "crypto"]

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å
conn = sqlite3.connect("posted_links.db")
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS links (link TEXT PRIMARY KEY)")

def is_link_posted(link):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–µ"""
    cursor.execute("SELECT 1 FROM links WHERE link=?", (link,))
    return cursor.fetchone() is not None

def mark_link_as_posted(link):
    """–ü–æ–∑–Ω–∞—á–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è —è–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–µ"""
    cursor.execute("INSERT INTO links VALUES (?)", (link,))
    conn.commit()

def contains_keywords(text):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ —É —Ç–µ–∫—Å—Ç—ñ"""
    text = text.lower()
    return any(kw in text for kw in KEYWORDS + KEYWORDS_CRYPTO)

def get_image(entry):
    """–û—Ç—Ä–∏–º—É—î URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ RSS-–∑–∞–ø–∏—Å—É"""
    for link in entry.get("links", []):
        if link.get("type", "").startswith("image"):
            return link.get("href")
    return None

def format_text(title, summary):
    """–§–æ—Ä–º–∞—Ç—É—î —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"""
    text = f"üì∞ <b>{title}</b>\n\n{summary}\n\n#–ù–æ–≤–∏–Ω–∏ #–ï–∫–æ–Ω–æ–º—ñ–∫–∞"
    return text[:1000] + "..." if len(text) > 1000 else text

async def fetch_and_post():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω"""
    while True:
        now = datetime.now()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        if not (ACTIVE_HOURS[0] <= now.hour < ACTIVE_HOURS[1]):
            await asyncio.sleep(600)
            continue

        for feed_url in RSS_FEEDS:
            try:
                # –ü–∞—Ä—Å–∏–Ω–≥ RSS
                feed = feedparser.parse(feed_url)
                if feed.get("bozo", False):
                    print(f"–ü–æ–º–∏–ª–∫–∞ RSS: {feed_url} - {feed.bozo_exception}")
                    continue

                for entry in feed.entries:
                    link = entry.link
                    title = entry.title
                    summary = entry.get("summary", "")
                    image_url = get_image(entry)

                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—î—é
                    if not image_url:
                        continue
                    if is_link_posted(link):
                        continue
                    if not contains_keywords(title + summary):
                        continue

                    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
                    text = format_text(title, summary)

                    # –°–ø—Ä–æ–±–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
                    try:
                        await bot.send_photo(
                            CHANNEL_ID,
                            photo=image_url,
                            caption=text,
                            parse_mode="HTML"
                        )
                        mark_link_as_posted(link)
                        print(f"–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {title}")
                    except Exception as e:
                        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")

                    # –ü–∞—É–∑–∞ –º—ñ–∂ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è–º–∏
                    await asyncio.sleep(10)

            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ RSS: {feed_url} - {e}")

        # –ü–∞—É–∑–∞ –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏ –¥–∂–µ—Ä–µ–ª
        await asyncio.sleep(1200)  # 20 —Ö–≤–∏–ª–∏–Ω

if __name__ == "__main__":
    try:
        asyncio.run(fetch_and_post())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
    finally:
        conn.close()
